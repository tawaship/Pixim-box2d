{"version":3,"file":"Pixim-box2d.js","sources":["../src/modules/Box2dAlias.ts","../src/modules/utils.ts","../src/modules/WorldContainer.ts","../src/modules/Box2dObject.ts","../src/modules/Circle.ts","../src/modules/Rectangle.ts","../src/modules/Polygon.ts","../src/modules/Edge.ts"],"sourcesContent":["import { Dynamics, Collision, Common } from '@tawaship/box2dweb-module';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Vec2 = Common.Math.b2Vec2; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import DebugDraw = Dynamics.b2DebugDraw; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import World = Dynamics.b2World; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Contact = Dynamics.Contacts.b2Contact; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContactListener = Dynamics.b2ContactListener; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import BodyDef = Dynamics.b2BodyDef; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import FixtureDef = Dynamics.b2FixtureDef; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Body = Dynamics.b2Body; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import CircleShape = Collision.Shapes.b2CircleShape; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import PolygonShape = Collision.Shapes.b2PolygonShape; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import EdgeShape = Collision.Shapes.b2EdgeShape; // eslint-disable-line @typescript-eslint/no-unused-vars","/**\r\n * @ignore\r\n */\r\nexport const Box2dToPixi = 30;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const PixiToBox2d = 1 / Box2dToPixi;","import { Container, Task, ITickerData } from '@tawaship/pixim.js';\r\nimport { Vec2, World, Contact, ContactListener, DebugDraw } from './Box2dAlias';\r\nimport { Box2dObject } from './Box2dObject';\r\nimport { Box2dToPixi, PixiToBox2d } from './utils';\r\n\r\nexport interface IWorldContainerData {\r\n\tworld: World;\r\n\tlistener: ContactListener;\r\n\tenabled: boolean;\r\n\tspeed: number;\r\n\ttargets: { [id: number]: Box2dObject };\r\n\tdeletes: { [id: number]: Box2dObject };\r\n\ttask: Task;\r\n\tdisplayOffsetX: number;\r\n\tdisplayOffsetY: number;\r\n\tdisplayAngle: number;\r\n\tperspectiveRatio: number;\r\n\tisDisplayNegative: boolean;\r\n}\r\n\r\nexport interface IWorldContainerOption {\r\n\tgravityX?: number;\r\n\tgravityY?: number;\r\n\tallowSleep?: boolean;\r\n\tlistenBeginContact?: boolean;\r\n\tlistenEndContact?: boolean;\r\n\tlistenPreSolve?: boolean;\r\n\tlistenPostSolve?: boolean;\r\n\tdisplayOffsetX?: number;\r\n\tdisplayOffsetY?: number;\r\n\tdisplayAngle?: number;\r\n\tperspectiveRatio?: number;\r\n\tisDisplayNegative?: boolean;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction beginContactHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('BeginContact', dataB);\r\n\tdataB && dataB.emit && dataB.emit('BeginContact', dataA);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction endContactHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('EndContact', dataB);\r\n\tdataB && dataB.emit && dataB.emit('EndContact', dataA);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction preSolveHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('PreSolve', dataB);\r\n\tdataB && dataB.emit && dataB.emit('PreSolve', dataA);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction postSolveHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('PostSolve', dataB);\r\n\tdataB && dataB.emit && dataB.emit('PostSolve', dataA);\r\n}\r\n\r\n/**\r\n * [[https://tawaship.github.io/Pixim.js/classes/container.html | Pixim.Container]]\r\n */\r\nexport class WorldContainer extends Container {\r\n\tprivate _box2dData: IWorldContainerData;\r\n\tdeclare children: Box2dObject[];\r\n\t\r\n\tconstructor(options: IWorldContainerOption) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tconst gravityX = typeof(options.gravityX) === 'number' ? options.gravityX : 0;\r\n\t\tconst gravityY = typeof(options.gravityY) === 'number' ? options.gravityY : 9.8;\r\n\t\tconst allowSleep = !!options.allowSleep;\r\n\t\t\r\n\t\tconst world = new World(new Vec2(gravityX, gravityY), allowSleep);\r\n\t\t\r\n\t\tthis._box2dData = {\r\n\t\t\tworld,\r\n\t\t\tlistener: new ContactListener(),\r\n\t\t\tenabled: true,\r\n\t\t\tspeed: 1,\r\n\t\t\ttargets: {},\r\n\t\t\tdeletes: {},\r\n\t\t\ttask: new Task([], this),\r\n\t\t\tdisplayOffsetX: options.displayOffsetX || 0,\r\n\t\t\tdisplayOffsetY: options.displayOffsetY || 0,\r\n\t\t\tdisplayAngle: options.displayAngle || 0,\r\n\t\t\tperspectiveRatio: options.perspectiveRatio || 1000,\r\n\t\t\tisDisplayNegative: options.isDisplayNegative || false\r\n\t\t};\r\n\t\t\r\n\t\tthis._box2dData.task.add((e: ITickerData) => {\r\n\t\t\tthis._handleTick(e.delta);\r\n\t\t});\r\n\t\tthis._box2dData.task.first();\r\n\t\t\r\n\t\tconst listener = this._box2dData.listener;\r\n\t\tif (options.listenBeginContact) {\r\n\t\t\tlistener.BeginContact = beginContactHandler;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.listenEndContact) {\r\n\t\t\tlistener.EndContact = endContactHandler;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.listenPreSolve) {\r\n\t\t\tlistener.PreSolve = preSolveHandler;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.listenPostSolve) {\r\n\t\t\tlistener.PostSolve = postSolveHandler;\r\n\t\t}\r\n\t\t\r\n\t\tworld.SetContactListener(listener);\r\n\t\t\r\n\t\tthis.box2dEnabled = true\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param canvas The canvas element on which the content is drawn.\r\n\t * @return Canvas element for debug display.\r\n\t */\r\n\taddDebugDraw( pixiCanvas: HTMLCanvasElement): HTMLCanvasElement {\r\n\t\tconst canvas = document.createElement('canvas');\r\n\t\t\r\n\t\tconst ctx = canvas.getContext('2d');\r\n\t\tif (!ctx) {\r\n\t\t\treturn canvas;\r\n\t\t}\r\n\t\t\r\n\t\tcanvas.width = pixiCanvas.width;\r\n\t\tcanvas.height = pixiCanvas.height;\r\n\t\tcanvas.style.width = pixiCanvas.style.width;\r\n\t\tcanvas.style.height = pixiCanvas.style.height;\r\n\t\tcanvas.style.top = pixiCanvas.style.top || '0';\r\n\t\tcanvas.style.left = pixiCanvas.style.left || '0';\r\n\t\tcanvas.style.position = 'absolute';\r\n\t\tcanvas.style.pointerEvents = 'none';\r\n\t\tcanvas.style.zIndex = '100';\r\n\t\t\r\n\t\tconst debugDraw = new DebugDraw();\r\n\t\tdebugDraw.SetSprite(ctx);\r\n\t\tdebugDraw.SetDrawScale(Box2dToPixi);\r\n\t\tdebugDraw.SetFillAlpha(0.5);\r\n\t\tdebugDraw.SetLineThickness(1);\r\n\t\tdebugDraw.SetFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit);\r\n\t\t\r\n\t\tthis.world.SetDebugDraw(debugDraw);\r\n\t\t\r\n\t\treturn canvas;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tupdateTask(e: ITickerData): void {\r\n\t\tsuper.updateTask(e);\r\n\t\t\r\n\t\tconst task = this._box2dData.task;\r\n\t\t\r\n\t\tif (!this.taskEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\ttask.done(e);\r\n\t}\r\n\t\r\n\tprivate _handleTick(delta: number) {\r\n\t\tif (!this._box2dData.enabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst world = this._box2dData.world;\r\n\t\t\r\n\t\tworld.Step(delta * this._box2dData.speed / 30, 10, 10);\r\n\t\tworld.ClearForces();\r\n\t\tworld.DrawDebugData();\r\n\t\t\r\n\t\tconst targets = this._box2dData.targets;\r\n\t\t\r\n\t\tfor (const i in this._box2dData.deletes) {\r\n\t\t\tconst b2d = this._box2dData.deletes[i];\r\n\t\t\tdelete(targets[i]);\r\n\t\t\tif (b2d.body) {\r\n\t\t\t\tworld.DestroyBody(b2d.body);\r\n\t\t\t\tb2d.body = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._box2dData.deletes = [];\r\n\t\tthis.reflect();\r\n\t}\r\n\t\r\n\treflect(): void {\r\n\t\tconst targets = this._box2dData.targets;\r\n\t\t\r\n\t\tconst displayOffsetX = this._box2dData.displayOffsetX;\r\n\t\tconst displayOffsetY = this._box2dData.displayOffsetY;\r\n\t\tconst displayAngle = this._box2dData.displayAngle;\r\n\t\t\r\n\t\tif (displayAngle === 0) {\r\n\t\t\tfor (const i in targets) {\r\n\t\t\t\tconst b2d = targets[i];\r\n\t\t\t\t\r\n\t\t\t\tif (!b2d.body) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst position = b2d.body.GetPosition();\r\n\t\t\t\t\r\n\t\t\t\tb2d.y = position.y * Box2dToPixi - displayOffsetY;\r\n\t\t\t\tb2d.x = (position.x * Box2dToPixi - displayOffsetX);\r\n\t\t\t\tb2d.rotation = b2d.body.GetAngle();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst isDisplayNegative = this._box2dData.isDisplayNegative;\r\n\t\t\tconst ratio = this._box2dData.perspectiveRatio * displayAngle;\r\n\t\t\t\r\n\t\t\tfor (const i in targets) {\r\n\t\t\t\tconst b2d = targets[i];\r\n\t\t\t\t\r\n\t\t\t\tif (!b2d.body) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst position = b2d.body.GetPosition();\r\n\t\t\t\t\r\n\t\t\t\tb2d.y = position.y * Box2dToPixi - displayOffsetY;\r\n\t\t\t\tconst s = 1 + b2d.y * displayAngle;\r\n\t\t\t\t\r\n\t\t\t\tif (!isDisplayNegative && s < 0) {\r\n\t\t\t\t\tb2d.renderable = false;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tb2d.visible = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tb2d.scale.set(s);\r\n\t\t\t\tb2d.x = (position.x * Box2dToPixi - displayOffsetX) * s;\r\n\t\t\t\tb2d.y *= s / ratio;\r\n\t\t\t\tb2d.rotation = b2d.body.GetAngle();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst children = this.removeChildren();\r\n\t\t\tconst n = children.sort((a, b) => {\r\n\t\t\t\tif (a.y === b.y) {\r\n\t\t\t\t\treturn Math.abs(a.x) - Math.abs(b.x);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn a.y - b.y;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.addChild(...n);\r\n\t\t}\r\n\t}\r\n\t\r\n\tget speed(): number {\r\n\t\treturn this._box2dData.speed;\r\n\t}\r\n\t\r\n\tset speed(speed: number) {\r\n\t\tthis._box2dData.speed = speed;\r\n\t}\r\n\t\r\n\tget box2dEnabled(): boolean {\r\n\t\treturn this._box2dData.enabled;\r\n\t}\r\n\t\r\n\tset box2dEnabled(flag: boolean) {\r\n\t\tthis._box2dData.enabled = flag;\r\n\t}\r\n\t\r\n\tget world(): World {\r\n\t\treturn this._box2dData.world;\r\n\t}\r\n\t\r\n\taddBox2d(b2d: Box2dObject): Box2dObject {\r\n\t\tif (!b2d.body) {\r\n\t\t\tconst body = this._box2dData.world.CreateBody(b2d.getBodyDef());\r\n\t\t\tconst fixtureDefs = b2d.getFixtureDefs();\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < fixtureDefs.length; i++) {\r\n\t\t\t\tbody.CreateFixture(fixtureDefs[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tb2d.body = body;\r\n\t\t\t\r\n\t\t\tbody.SetPosition(new Vec2(b2d.x * PixiToBox2d, b2d.y * PixiToBox2d));\r\n\t\t\tbody.SetAngle(b2d.rotation);\r\n\t\t}\r\n\t\t\r\n\t\tb2d.reflect();\r\n\t\tthis.addChild(b2d);\r\n\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\tdelete(this._box2dData.deletes[b2d.box2dID]);\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n\t\r\n\tremoveBox2d(b2d: Box2dObject): Box2dObject {\r\n\t\tthis.removeChild(b2d);\r\n\t\tthis._box2dData.deletes[b2d.box2dID] = b2d;\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n\t\r\n\tget displayOffsetX(): number {\r\n\t\treturn this._box2dData.displayOffsetX;\r\n\t}\r\n\t\r\n\tset displayOffsetX(displayOffsetX: number) {\r\n\t\tthis._box2dData.displayOffsetX = displayOffsetX;\r\n\t}\r\n\t\r\n\tget displayOffsetY(): number {\r\n\t\treturn this._box2dData.displayOffsetY;\r\n\t}\r\n\t\r\n\tset displayOffsetY(displayOffsetY: number) {\r\n\t\tthis._box2dData.displayOffsetY = displayOffsetY;\r\n\t}\r\n\t\r\n\tget displayAngle(): number {\r\n\t\treturn this._box2dData.displayAngle;\r\n\t}\r\n\t\r\n\tset displayAngle(displayAngle: number) {\r\n\t\tthis._box2dData.displayAngle = displayAngle;\r\n\t}\r\n}","import { Container } from 'pixi.js';\r\nimport { BodyDef, FixtureDef, Body } from './Box2dAlias';\r\nimport { PixiToBox2d } from './utils';\r\n\r\nexport interface IBox2dObjectOption {\r\n\tdensity?: number;\r\n\tfriction?: number;\r\n\trestitution?: number;\r\n\tisStatic?: boolean\r\n\t\r\n\t/**\r\n\t * The logical sum of the bits representing the collision detection category to which it belongs.\r\n\t */\r\n\tcategoryBits?: number;\r\n\t\r\n\t/**\r\n\t * The logical sum of the \"categoryBits\" for which collision detection with itself is performed.\r\n\t */\r\n\tmaskBits?: number;\r\n\t\r\n\t/**\r\n\t * Whether it is a sensor that judges only the overlap of coordinates.\r\n\t */\r\n\tisSensor?: boolean;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\ntype TBox2dObjectBody = Body | null;\r\n\r\nexport interface IBox2dObjectData {\r\n\tid: number;\r\n\tbody: TBox2dObjectBody;\r\n\tbodyDef: BodyDef;\r\n\tfixtureDefs: FixtureDef[];\r\n\tmaskBits: number;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction createBodyDef(isDynamic = false) {\r\n\tconst bodyDef = new BodyDef();\r\n\tisDynamic ? bodyDef.type = Body.b2_dynamicBody : Body.b2_staticBody;\r\n\t\r\n\treturn bodyDef;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst dynamicBodyDef: BodyDef = createBodyDef(true);\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst staticBodyDef: BodyDef = createBodyDef(false);\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction createFixtureDef(options: IBox2dObjectOption = {}, pixi: Container) {\r\n\tconst fixtureDef = new FixtureDef();\r\n\t\r\n\tfixtureDef.density = typeof(options.density) === 'number' ? options.density : fixtureDef.density;\r\n\tfixtureDef.friction = typeof(options.friction) === 'number' ? options.friction : fixtureDef.friction;\r\n\tfixtureDef.restitution = typeof(options.restitution) === 'number' ? options.restitution : fixtureDef.restitution;\r\n\tfixtureDef.filter.categoryBits = typeof(options.categoryBits) === 'number' ? options.categoryBits : fixtureDef.filter.categoryBits;\r\n\tfixtureDef.filter.maskBits = typeof(options.maskBits) === 'number' ? options.maskBits : fixtureDef.filter.maskBits;\r\n\tfixtureDef.isSensor = !!options.isSensor;\r\n\tfixtureDef.userData = pixi;\r\n\t\r\n\treturn fixtureDef;\r\n}\r\n\r\n/**\r\n * [[https://tawaship.github.io/Pixim.js/classes/container.html | Pixim.Container]]\r\n */\r\nexport class Box2dObject extends Container {\r\n\tprotected _box2dData: IBox2dObjectData;\r\n\tprivate static _id = 0;\r\n\t\r\n\t/**\r\n\t * When objects come into contact with each other.\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tBeginContact?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\t/**\r\n\t * When objects are separated from each other.\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tEndContact?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\t/**\r\n\t * Immediately before performing contact processing between objects.<br />\r\n\t * It will not fire if at least one is \"isSensor = true\".\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tPreSolve?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\t/**\r\n\t * Immediately after performing contact processing between objects.<br />\r\n\t * It will not fire if at least one is \"isSensor = true\".\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tPostSolve?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\tconstructor(options: IBox2dObjectOption = {}) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tconst fixtureDef = createFixtureDef(options, this);\r\n\t\tthis._box2dData = {\r\n\t\t\tid: Box2dObject._id++,\r\n\t\t\tbody: null,\r\n\t\t\tbodyDef: options.isStatic ? staticBodyDef : dynamicBodyDef,\r\n\t\t\tfixtureDefs: [fixtureDef],\r\n\t\t\tmaskBits: fixtureDef.filter.maskBits\r\n\t\t};\r\n\t}\r\n\t\r\n\tgetBodyDef(): BodyDef {\r\n\t\treturn this._box2dData.bodyDef;\r\n\t}\r\n\t\r\n\tgetFixtureDefs(): FixtureDef[] {\r\n\t\treturn this._box2dData.fixtureDefs;\r\n\t}\r\n\t\r\n\tget box2dID(): number {\r\n\t\treturn this._box2dData.id;\r\n\t}\r\n\t\r\n\tget body(): TBox2dObjectBody {\r\n\t\treturn this._box2dData.body;\r\n\t}\r\n\t\r\n\tset body(body: TBox2dObjectBody) {\r\n\t\tthis._box2dData.body = body;\r\n\t}\r\n\t\r\n\tsetX(x: number): void {\r\n\t\tthis.x = x;\r\n\t\t\r\n\t\tconst body = this._box2dData.body;\r\n\t\tif (!body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst p = body.GetPosition();\r\n\t\tp.x = x * PixiToBox2d;\r\n\t\tbody.SetPosition(p);\r\n\t}\r\n\t\r\n\tsetY(y: number): void {\r\n\t\tthis.y = y;\r\n\t\t\r\n\t\tconst body = this._box2dData.body;\r\n\t\tif (!body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst p = body.GetPosition();\r\n\t\tp.y = y * PixiToBox2d;\r\n\t\tbody.SetPosition(p);\r\n\t}\r\n\t\r\n\tsetRotation(rotation: number): void {\r\n\t\tthis.rotation = rotation;\r\n\t\t\r\n\t\tconst body = this._box2dData.body;\r\n\t\tif (!body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tbody.SetAngle(rotation);\r\n\t}\r\n\t\r\n\treflect(): void {\r\n\t\tthis.setX(this.x);\r\n\t\tthis.setY(this.y);\r\n\t\tthis.setRotation(this.rotation);\r\n\t\tthis.addMask(this._box2dData.maskBits);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds the object with the specified \"category Bits\" to collision detection.\r\n\t */\r\n\taddMask(bits: number): void {\r\n\t\tthis._box2dData.maskBits |= bits;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = this._box2dData.maskBits;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set to perform collision detection with all objects.\r\n\t */\r\n\taddAllMask(): void {\r\n\t\tthis._box2dData.maskBits = 65535;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = 65535;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the object with the specified \"category bit\" from collision detection.\r\n\t */\r\n\tremoveMask(bits: number): void {\r\n\t\tthis._box2dData.maskBits ^= this._box2dData.maskBits & bits;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = this._box2dData.maskBits;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set not to perform collision detection with any object.\r\n\t */\r\n\tremoveAllMask(): void {\r\n\t\tthis._box2dData.maskBits = 0;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = 0;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\ttoDynamic(): void {\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis._box2dData.body.SetType(Body.b2_dynamicBody);\r\n\t}\r\n\t\r\n\ttoStatic(): void {\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis._box2dData.body.SetType(Body.b2_staticBody);\r\n\t}\r\n}\r\n\r\ndelete(Box2dObject.prototype.BeginContact);\r\ndelete(Box2dObject.prototype.EndContact);\r\ndelete(Box2dObject.prototype.PreSolve);\r\ndelete(Box2dObject.prototype.PostSolve);","import { Container } from 'pixi.js';\r\nimport { CircleShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\nimport { PixiToBox2d } from './utils';\r\n\r\nexport class Circle extends Box2dObject {\r\n\tconstructor(radius: number, options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tfixtureDef.shape = new CircleShape(radius * PixiToBox2d);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a \"Circle\" instance whose radius is the larger width or height of the \"PIXI.Container\" instance at that point.\r\n\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t */\r\n\tstatic from(pixi: Container, options: IBox2dObjectOption = {}): Circle {\r\n\t\tconst b2d = new Circle(Math.max(pixi.width / 2, pixi.height/ 2), options);\r\n\t\t\r\n\t\tconst c = b2d.addChild(new Container());\r\n\t\tc.addChild(pixi);\r\n\t\t\r\n\t\tconst b = b2d.getLocalBounds();\r\n\t\tc.x = -b.x - pixi.width / 2;\r\n\t\tc.y = -b.y - pixi.height / 2;\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n}","import { Container } from 'pixi.js';\r\nimport { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\nimport { PixiToBox2d }from './utils';\r\n\r\nexport class Rectangle extends Box2dObject {\r\n\tconstructor(width: number, height: number, options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\twidth *= PixiToBox2d;\r\n\t\theight *= PixiToBox2d;\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tconst shape = new PolygonShape();\r\n\t\tshape.SetAsArray([\r\n\t\t\tnew Vec2(0, 0),\r\n\t\t\tnew Vec2(width, 0),\r\n\t\t\tnew Vec2(width, height),\r\n\t\t\tnew Vec2(0, height)\r\n\t\t]);\r\n\t\t\r\n\t\tfixtureDef.shape = shape;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a \"Rectangle\" instance that circumscribes the shape of the \"PIXI.Container\" instance at that point.\r\n\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t */\r\n\tstatic from(pixi: Container, options: IBox2dObjectOption = {}): Rectangle {\r\n\t\tconst b2d = new Rectangle(pixi.width, pixi.height, options);\r\n\t\t\r\n\t\tconst c = b2d.addChild(new Container());\r\n\t\tc.addChild(pixi);\r\n\t\t\r\n\t\tconst b = b2d.getLocalBounds();\r\n\t\tc.x = -b.x;\r\n\t\tc.y = -b.y;\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n}","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\n\r\nexport class Polygon extends Box2dObject {\r\n\tconstructor(vertices: Vec2[], options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tconst shape = new PolygonShape();\r\n\t\tshape.SetAsArray(vertices);\r\n\t\t\r\n\t\tfixtureDef.shape = shape;\r\n\t}\r\n}","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\nimport { PixiToBox2d } from './utils';\r\n\r\nexport class Edge extends Box2dObject {\r\n\tconstructor(to: Vec2, options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tconst shape = new PolygonShape();\r\n\t\tshape.SetAsEdge(new Vec2(0, 0), new Vec2(to.x * PixiToBox2d, to.y * PixiToBox2d));\r\n\t\t\r\n\t\tfixtureDef.shape = shape;\r\n\t}\r\n}"],"names":["Vec2","Common","Math","b2Vec2","DebugDraw","Dynamics","b2DebugDraw","World","b2World","ContactListener","Contacts","b2Contact","b2ContactListener","BodyDef","b2BodyDef","FixtureDef","b2FixtureDef","Body","b2Body","CircleShape","Collision","Shapes","b2CircleShape","PolygonShape","b2PolygonShape","PixiToBox2d","b2EdgeShape","beginContactHandler","contact","const","dataA","GetFixtureA","GetUserData","dataB","GetFixtureB","emit","endContactHandler","preSolveHandler","postSolveHandler","WorldContainer","options","super","gravityX","gravityY","allowSleep","world","this","_box2dData","listener","enabled","speed","targets","deletes","task","Task","displayOffsetX","displayOffsetY","displayAngle","perspectiveRatio","isDisplayNegative","add","e","_handleTick","delta","first","listenBeginContact","BeginContact","listenEndContact","EndContact","listenPreSolve","PreSolve","listenPostSolve","PostSolve","SetContactListener","box2dEnabled","addDebugDraw","pixiCanvas","canvas","document","createElement","ctx","getContext","width","height","style","top","left","position","pointerEvents","zIndex","debugDraw","SetSprite","SetDrawScale","SetFillAlpha","SetLineThickness","SetFlags","e_shapeBit","e_jointBit","SetDebugDraw","updateTask","taskEnabled","done","Step","ClearForces","DrawDebugData","i","b2d","body","DestroyBody","reflect","GetPosition","y","x","rotation","GetAngle","ratio","s","renderable","visible","scale","set","n","removeChildren","sort","a","b","abs","addChild","prototypeAccessors","flag","addBox2d","CreateBody","getBodyDef","fixtureDefs","getFixtureDefs","length","CreateFixture","SetPosition","SetAngle","box2dID","removeBox2d","removeChild","Container","createBodyDef","isDynamic","bodyDef","type","b2_dynamicBody","b2_staticBody","dynamicBodyDef","staticBodyDef","Box2dObject","fixtureDef","pixi","density","friction","restitution","filter","categoryBits","maskBits","isSensor","userData","createFixtureDef","id","_id","isStatic","opponent","setX","p","setY","setRotation","addMask","bits","let","list","GetFixtureList","data","GetFilterData","SetFilterData","GetNext","addAllMask","removeMask","removeAllMask","toDynamic","SetType","toStatic","prototype","Circle","radius","shape","from","max","c","getLocalBounds","Rectangle","SetAsArray","Polygon","vertices","Edge","to","SetAsEdge"],"mappings":"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"}