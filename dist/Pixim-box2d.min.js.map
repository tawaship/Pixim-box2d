{"version":3,"file":"Pixim-box2d.min.js","sources":["../src/modules/Box2dAlias.ts","../src/modules/utils.ts","../src/modules/WorldContainer.ts","../src/modules/Box2dObject.ts","../src/modules/Circle.ts","../src/modules/Rectangle.ts","../src/modules/Polygon.ts","../src/modules/Edge.ts"],"sourcesContent":["import { Dynamics, Collision, Common } from '@tawaship/box2dweb-module';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Vec2 = Common.Math.b2Vec2; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import DebugDraw = Dynamics.b2DebugDraw; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import World = Dynamics.b2World; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Contact = Dynamics.Contacts.b2Contact; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContactListener = Dynamics.b2ContactListener; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import BodyDef = Dynamics.b2BodyDef; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import FixtureDef = Dynamics.b2FixtureDef; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Body = Dynamics.b2Body; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import CircleShape = Collision.Shapes.b2CircleShape; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import PolygonShape = Collision.Shapes.b2PolygonShape; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import EdgeShape = Collision.Shapes.b2EdgeShape; // eslint-disable-line @typescript-eslint/no-unused-vars","/**\r\n * @ignore\r\n */\r\nexport const Box2dToPixi = 30;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const PixiToBox2d = 1 / Box2dToPixi;","import { Container, Task, ITickerData } from '@tawaship/pixim.js';\r\nimport { Vec2, World, Contact, ContactListener, DebugDraw } from './Box2dAlias';\r\nimport { Box2dObject } from './Box2dObject';\r\nimport { Box2dToPixi, PixiToBox2d } from './utils';\r\n\r\nexport interface IWorldContainerData {\r\n\tworld: World;\r\n\tlistener: ContactListener;\r\n\tenabled: boolean;\r\n\tspeed: number;\r\n\ttargets: { [id: number]: Box2dObject };\r\n\tdeletes: { [id: number]: Box2dObject };\r\n\ttask: Task;\r\n}\r\n\r\nexport interface IWorldContainerOption {\r\n\tgravityX?: number;\r\n\tgravityY?: number;\r\n\tallowSleep?: boolean;\r\n\tlistenBeginContact?: boolean;\r\n\tlistenEndContact?: boolean;\r\n\tlistenPreSolve?: boolean;\r\n\tlistenPostSolve?: boolean;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction beginContactHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('BeginContact', dataB);\r\n\tdataB && dataB.emit && dataB.emit('BeginContact', dataA);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction endContactHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('EndContact', dataB);\r\n\tdataB && dataB.emit && dataB.emit('EndContact', dataA);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction preSolveHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('PreSolve', dataB);\r\n\tdataB && dataB.emit && dataB.emit('PreSolve', dataA);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction postSolveHandler(contact: Contact) {\r\n\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\r\n\tdataA && dataA.emit && dataA.emit('PostSolve', dataB);\r\n\tdataB && dataB.emit && dataB.emit('PostSolve', dataA);\r\n}\r\n\r\n/**\r\n * [[https://tawaship.github.io/Pixim.js/classes/container.html | Pixim.Container]]\r\n */\r\nexport class WorldContainer extends Container {\r\n\tprivate _box2dData: IWorldContainerData;\r\n\t\r\n\tconstructor(options: IWorldContainerOption) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tconst gravityX = typeof(options.gravityX) === 'number' ? options.gravityX : 0;\r\n\t\tconst gravityY = typeof(options.gravityY) === 'number' ? options.gravityY : 9.8;\r\n\t\tconst allowSleep = !!options.allowSleep;\r\n\t\t\r\n\t\tconst world = new World(new Vec2(gravityX, gravityY), allowSleep);\r\n\t\t\r\n\t\tthis._box2dData = {\r\n\t\t\tworld,\r\n\t\t\tlistener: new ContactListener(),\r\n\t\t\tenabled: true,\r\n\t\t\tspeed: 1,\r\n\t\t\ttargets: {},\r\n\t\t\tdeletes: {},\r\n\t\t\ttask: new Task([], this)\r\n\t\t};\r\n\t\t\r\n\t\tthis._box2dData.task.add((e: ITickerData) => {\r\n\t\t\tthis._handleTick(e.delta);\r\n\t\t});\r\n\t\tthis._box2dData.task.first();\r\n\t\t\r\n\t\tconst listener = this._box2dData.listener;\r\n\t\tif (options.listenBeginContact) {\r\n\t\t\tlistener.BeginContact = beginContactHandler;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.listenEndContact) {\r\n\t\t\tlistener.EndContact = endContactHandler;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.listenPreSolve) {\r\n\t\t\tlistener.PreSolve = preSolveHandler;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.listenPostSolve) {\r\n\t\t\tlistener.PostSolve = postSolveHandler;\r\n\t\t}\r\n\t\t\r\n\t\tworld.SetContactListener(listener);\r\n\t\t\r\n\t\tthis.box2dEnabled = true\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param canvas The canvas element on which the content is drawn.\r\n\t * @return Canvas element for debug display.\r\n\t */\r\n\taddDebugDraw( pixiCanvas: HTMLCanvasElement): HTMLCanvasElement {\r\n\t\tconst canvas = document.createElement('canvas');\r\n\t\t\r\n\t\tconst ctx = canvas.getContext('2d');\r\n\t\tif (!ctx) {\r\n\t\t\treturn canvas;\r\n\t\t}\r\n\t\t\r\n\t\tcanvas.width = pixiCanvas.width;\r\n\t\tcanvas.height = pixiCanvas.height;\r\n\t\tcanvas.style.width = pixiCanvas.style.width;\r\n\t\tcanvas.style.height = pixiCanvas.style.height;\r\n\t\tcanvas.style.top = pixiCanvas.style.top || '0';\r\n\t\tcanvas.style.left = pixiCanvas.style.left || '0';\r\n\t\tcanvas.style.position = 'absolute';\r\n\t\tcanvas.style.pointerEvents = 'none';\r\n\t\tcanvas.style.zIndex = '100';\r\n\t\t\r\n\t\tconst debugDraw = new DebugDraw();\r\n\t\tdebugDraw.SetSprite(ctx);\r\n\t\tdebugDraw.SetDrawScale(Box2dToPixi);\r\n\t\tdebugDraw.SetFillAlpha(0.5);\r\n\t\tdebugDraw.SetLineThickness(1);\r\n\t\tdebugDraw.SetFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit);\r\n\t\t\r\n\t\tthis.world.SetDebugDraw(debugDraw);\r\n\t\t\r\n\t\treturn canvas;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tupdateTask(e: ITickerData): void {\r\n\t\tsuper.updateTask(e);\r\n\t\t\r\n\t\tconst task = this._box2dData.task;\r\n\t\t\r\n\t\tif (!this.taskEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\ttask.done(e);\r\n\t}\r\n\t\r\n\tprivate _handleTick(delta: number) {\r\n\t\tif (!this._box2dData.enabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst world = this._box2dData.world;\r\n\t\t\r\n\t\tworld.Step(delta * this._box2dData.speed / 30, 10, 10);\r\n\t\tworld.ClearForces();\r\n\t\tworld.DrawDebugData();\r\n\t\t\r\n\t\tconst targets = this._box2dData.targets;\r\n\t\t\r\n\t\tfor (const i in this._box2dData.deletes) {\r\n\t\t\tconst b2d = this._box2dData.deletes[i];\r\n\t\t\tdelete(targets[i]);\r\n\t\t\tif (b2d.body) {\r\n\t\t\t\tworld.DestroyBody(b2d.body);\r\n\t\t\t\tb2d.body = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._box2dData.deletes = [];\r\n\t\t\r\n\t\tfor (const i in targets) {\r\n\t\t\tconst b2d = targets[i];\r\n\t\t\t\r\n\t\t\tif (!b2d.body) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst position = b2d.body.GetPosition();\r\n\t\t\t\r\n\t\t\tb2d.x = position.x * Box2dToPixi;\r\n\t\t\tb2d.y = position.y * Box2dToPixi;\r\n\t\t\tb2d.rotation = b2d.body.GetAngle();\r\n\t\t}\r\n\t}\r\n\t\r\n\tget speed(): number {\r\n\t\treturn this._box2dData.speed;\r\n\t}\r\n\t\r\n\tset speed(speed: number) {\r\n\t\tthis._box2dData.speed = speed;\r\n\t}\r\n\t\r\n\tget box2dEnabled(): boolean {\r\n\t\treturn this._box2dData.enabled;\r\n\t}\r\n\t\r\n\tset box2dEnabled(flag: boolean) {\r\n\t\tthis._box2dData.enabled = flag;\r\n\t}\r\n\t\r\n\tget world(): World {\r\n\t\treturn this._box2dData.world;\r\n\t}\r\n\t\r\n\taddBox2d(b2d: Box2dObject): Box2dObject {\r\n\t\tif (!b2d.body) {\r\n\t\t\tconst body = this._box2dData.world.CreateBody(b2d.getBodyDef());\r\n\t\t\tconst fixtureDefs = b2d.getFixtureDefs();\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < fixtureDefs.length; i++) {\r\n\t\t\t\tbody.CreateFixture(fixtureDefs[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tb2d.body = body;\r\n\t\t\t\r\n\t\t\tbody.SetPosition(new Vec2(b2d.x * PixiToBox2d, b2d.y * PixiToBox2d));\r\n\t\t\tbody.SetAngle(b2d.rotation);\r\n\t\t}\r\n\t\t\r\n\t\tb2d.reflect();\r\n\t\tthis.addChild(b2d);\r\n\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\tdelete(this._box2dData.deletes[b2d.box2dID]);\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n\t\r\n\tremoveBox2d(b2d: Box2dObject): Box2dObject {\r\n\t\tthis.removeChild(b2d);\r\n\t\tthis._box2dData.deletes[b2d.box2dID] = b2d;\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n}","import { Container } from 'pixi.js';\r\nimport { BodyDef, FixtureDef, Body } from './Box2dAlias';\r\nimport { PixiToBox2d } from './utils';\r\n\r\nexport interface IBox2dObjectOption {\r\n\tdensity?: number;\r\n\tfriction?: number;\r\n\trestitution?: number;\r\n\tisStatic?: boolean\r\n\t\r\n\t/**\r\n\t * The logical sum of the bits representing the collision detection category to which it belongs.\r\n\t */\r\n\tcategoryBits?: number;\r\n\t\r\n\t/**\r\n\t * The logical sum of the \"categoryBits\" for which collision detection with itself is performed.\r\n\t */\r\n\tmaskBits?: number;\r\n\t\r\n\t/**\r\n\t * Whether it is a sensor that judges only the overlap of coordinates.\r\n\t */\r\n\tisSensor?: boolean;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\ntype TBox2dObjectBody = Body | null;\r\n\r\nexport interface IBox2dObjectData {\r\n\tid: number;\r\n\tbody: TBox2dObjectBody;\r\n\tbodyDef: BodyDef;\r\n\tfixtureDefs: FixtureDef[];\r\n\tmaskBits: number;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction createBodyDef(isDynamic = false) {\r\n\tconst bodyDef = new BodyDef();\r\n\tisDynamic ? bodyDef.type = Body.b2_dynamicBody : Body.b2_staticBody;\r\n\t\r\n\treturn bodyDef;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst dynamicBodyDef: BodyDef = createBodyDef(true);\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst staticBodyDef: BodyDef = createBodyDef(false);\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction createFixtureDef(options: IBox2dObjectOption = {}, pixi: Container) {\r\n\tconst fixtureDef = new FixtureDef();\r\n\t\r\n\tfixtureDef.density = typeof(options.density) === 'number' ? options.density : fixtureDef.density;\r\n\tfixtureDef.friction = typeof(options.friction) === 'number' ? options.friction : fixtureDef.friction;\r\n\tfixtureDef.restitution = typeof(options.restitution) === 'number' ? options.restitution : fixtureDef.restitution;\r\n\tfixtureDef.filter.categoryBits = typeof(options.categoryBits) === 'number' ? options.categoryBits : fixtureDef.filter.categoryBits;\r\n\tfixtureDef.filter.maskBits = typeof(options.maskBits) === 'number' ? options.maskBits : fixtureDef.filter.maskBits;\r\n\tfixtureDef.isSensor = !!options.isSensor;\r\n\tfixtureDef.userData = pixi;\r\n\t\r\n\treturn fixtureDef;\r\n}\r\n\r\n/**\r\n * [[https://tawaship.github.io/Pixim.js/classes/container.html | Pixim.Container]]\r\n */\r\nexport class Box2dObject extends Container {\r\n\tprotected _box2dData: IBox2dObjectData;\r\n\tprivate static _id = 0;\r\n\t\r\n\t/**\r\n\t * When objects come into contact with each other.\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tBeginContact?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\t/**\r\n\t * When objects are separated from each other.\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tEndContact?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\t/**\r\n\t * Immediately before performing contact processing between objects.<br />\r\n\t * It will not fire if at least one is \"isSensor = true\".\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tPreSolve?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\t/**\r\n\t * Immediately after performing contact processing between objects.<br />\r\n\t * It will not fire if at least one is \"isSensor = true\".\r\n\t * @event\r\n\t * @param opponent The object to collide with.\r\n\t */\r\n\tPostSolve?(opponent: Box2dObject): void {} // eslint-disable-line\r\n\t\r\n\tconstructor(options: IBox2dObjectOption = {}) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tconst fixtureDef = createFixtureDef(options, this);\r\n\t\tthis._box2dData = {\r\n\t\t\tid: Box2dObject._id++,\r\n\t\t\tbody: null,\r\n\t\t\tbodyDef: options.isStatic ? staticBodyDef : dynamicBodyDef,\r\n\t\t\tfixtureDefs: [fixtureDef],\r\n\t\t\tmaskBits: fixtureDef.filter.maskBits\r\n\t\t};\r\n\t}\r\n\t\r\n\tgetBodyDef(): BodyDef {\r\n\t\treturn this._box2dData.bodyDef;\r\n\t}\r\n\t\r\n\tgetFixtureDefs(): FixtureDef[] {\r\n\t\treturn this._box2dData.fixtureDefs;\r\n\t}\r\n\t\r\n\tget box2dID(): number {\r\n\t\treturn this._box2dData.id;\r\n\t}\r\n\t\r\n\tget body(): TBox2dObjectBody {\r\n\t\treturn this._box2dData.body;\r\n\t}\r\n\t\r\n\tset body(body: TBox2dObjectBody) {\r\n\t\tthis._box2dData.body = body;\r\n\t}\r\n\t\r\n\tsetX(x: number): void {\r\n\t\tthis.x = x;\r\n\t\t\r\n\t\tconst body = this._box2dData.body;\r\n\t\tif (!body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst p = body.GetPosition();\r\n\t\tp.x = x * PixiToBox2d;\r\n\t\tbody.SetPosition(p);\r\n\t}\r\n\t\r\n\tsetY(y: number): void {\r\n\t\tthis.y = y;\r\n\t\t\r\n\t\tconst body = this._box2dData.body;\r\n\t\tif (!body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst p = body.GetPosition();\r\n\t\tp.y = y * PixiToBox2d;\r\n\t\tbody.SetPosition(p);\r\n\t}\r\n\t\r\n\tsetRotation(rotation: number): void {\r\n\t\tthis.rotation = rotation;\r\n\t\t\r\n\t\tconst body = this._box2dData.body;\r\n\t\tif (!body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tbody.SetAngle(rotation);\r\n\t}\r\n\t\r\n\treflect(): void {\r\n\t\tthis.setX(this.x);\r\n\t\tthis.setY(this.y);\r\n\t\tthis.setRotation(this.rotation);\r\n\t\tthis.addMask(this._box2dData.maskBits);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds the object with the specified \"category Bits\" to collision detection.\r\n\t */\r\n\taddMask(bits: number): void {\r\n\t\tthis._box2dData.maskBits |= bits;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = this._box2dData.maskBits;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set to perform collision detection with all objects.\r\n\t */\r\n\taddAllMask(): void {\r\n\t\tthis._box2dData.maskBits = 65535;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = 65535;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the object with the specified \"category bit\" from collision detection.\r\n\t */\r\n\tremoveMask(bits: number): void {\r\n\t\tthis._box2dData.maskBits ^= this._box2dData.maskBits & bits;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = this._box2dData.maskBits;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set not to perform collision detection with any object.\r\n\t */\r\n\tremoveAllMask(): void {\r\n\t\tthis._box2dData.maskBits = 0;\r\n\t\t\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\r\n\t\twhile (list) {\r\n\t\t\tconst data = list.GetFilterData();\r\n\t\t\tdata.maskBits = 0;\r\n\t\t\tlist.SetFilterData(data);\r\n\t\t\t\r\n\t\t\tlist = list.GetNext();\r\n\t\t}\r\n\t}\r\n\t\r\n\ttoDynamic(): void {\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis._box2dData.body.SetType(Body.b2_dynamicBody);\r\n\t}\r\n\t\r\n\ttoStatic(): void {\r\n\t\tif (!this._box2dData.body) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis._box2dData.body.SetType(Body.b2_staticBody);\r\n\t}\r\n}\r\n\r\ndelete(Box2dObject.prototype.BeginContact);\r\ndelete(Box2dObject.prototype.EndContact);\r\ndelete(Box2dObject.prototype.PreSolve);\r\ndelete(Box2dObject.prototype.PostSolve);","import { Container } from 'pixi.js';\r\nimport { CircleShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\nimport { PixiToBox2d } from './utils';\r\n\r\nexport class Circle extends Box2dObject {\r\n\tconstructor(radius: number, options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tfixtureDef.shape = new CircleShape(radius * PixiToBox2d);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a \"Circle\" instance whose radius is the larger width or height of the \"PIXI.Container\" instance at that point.\r\n\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t */\r\n\tstatic from(pixi: Container, options: IBox2dObjectOption = {}): Circle {\r\n\t\tconst b2d = new Circle(Math.max(pixi.width / 2, pixi.height/ 2), options);\r\n\t\t\r\n\t\tconst c = b2d.addChild(new Container());\r\n\t\tc.addChild(pixi);\r\n\t\t\r\n\t\tconst b = b2d.getLocalBounds();\r\n\t\tc.x = -b.x - pixi.width / 2;\r\n\t\tc.y = -b.y - pixi.height / 2;\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n}","import { Container } from 'pixi.js';\r\nimport { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\nimport { PixiToBox2d }from './utils';\r\n\r\nexport class Rectangle extends Box2dObject {\r\n\tconstructor(width: number, height: number, options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\twidth *= PixiToBox2d;\r\n\t\theight *= PixiToBox2d;\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tconst shape = new PolygonShape();\r\n\t\tshape.SetAsArray([\r\n\t\t\tnew Vec2(0, 0),\r\n\t\t\tnew Vec2(width, 0),\r\n\t\t\tnew Vec2(width, height),\r\n\t\t\tnew Vec2(0, height)\r\n\t\t]);\r\n\t\t\r\n\t\tfixtureDef.shape = shape;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a \"Rectangle\" instance that circumscribes the shape of the \"PIXI.Container\" instance at that point.\r\n\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t */\r\n\tstatic from(pixi: Container, options: IBox2dObjectOption = {}): Rectangle {\r\n\t\tconst b2d = new Rectangle(pixi.width, pixi.height, options);\r\n\t\t\r\n\t\tconst c = b2d.addChild(new Container());\r\n\t\tc.addChild(pixi);\r\n\t\t\r\n\t\tconst b = b2d.getLocalBounds();\r\n\t\tc.x = -b.x;\r\n\t\tc.y = -b.y;\r\n\t\t\r\n\t\treturn b2d;\r\n\t}\r\n}","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\n\r\nexport class Polygon extends Box2dObject {\r\n\tconstructor(vertices: Vec2[], options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tconst shape = new PolygonShape();\r\n\t\tshape.SetAsArray(vertices);\r\n\t\t\r\n\t\tfixtureDef.shape = shape;\r\n\t}\r\n}","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectOption } from './Box2dObject';\r\nimport { PixiToBox2d } from './utils';\r\n\r\nexport class Edge extends Box2dObject {\r\n\tconstructor(to: Vec2, options: IBox2dObjectOption = {}) {\r\n\t\tsuper(options);\r\n\t\t\r\n\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\tconst shape = new PolygonShape();\r\n\t\tshape.SetAsEdge(new Vec2(0, 0), new Vec2(to.x * PixiToBox2d, to.y * PixiToBox2d));\r\n\t\t\r\n\t\tfixtureDef.shape = shape;\r\n\t}\r\n}"],"names":["Vec2","Common","Math","b2Vec2","DebugDraw","Dynamics","b2DebugDraw","World","b2World","ContactListener","Contacts","b2Contact","b2ContactListener","BodyDef","b2BodyDef","FixtureDef","b2FixtureDef","Body","b2Body","CircleShape","Collision","Shapes","b2CircleShape","PolygonShape","b2PolygonShape","PixiToBox2d","b2EdgeShape","beginContactHandler","contact","const","dataA","GetFixtureA","GetUserData","dataB","GetFixtureB","emit","endContactHandler","preSolveHandler","postSolveHandler","WorldContainer","options","super","gravityX","gravityY","allowSleep","world","this","_box2dData","listener","enabled","speed","targets","deletes","task","Task","add","e","_handleTick","delta","first","listenBeginContact","BeginContact","listenEndContact","EndContact","listenPreSolve","PreSolve","listenPostSolve","PostSolve","SetContactListener","box2dEnabled","addDebugDraw","pixiCanvas","canvas","document","createElement","ctx","getContext","width","height","style","top","left","position","pointerEvents","zIndex","debugDraw","SetSprite","SetDrawScale","SetFillAlpha","SetLineThickness","SetFlags","e_shapeBit","e_jointBit","SetDebugDraw","updateTask","taskEnabled","done","Step","ClearForces","DrawDebugData","i","b2d","body","DestroyBody","GetPosition","x","y","rotation","GetAngle","prototypeAccessors","flag","addBox2d","CreateBody","getBodyDef","fixtureDefs","getFixtureDefs","length","CreateFixture","SetPosition","SetAngle","reflect","addChild","box2dID","removeBox2d","removeChild","Container","createBodyDef","isDynamic","bodyDef","type","b2_dynamicBody","b2_staticBody","dynamicBodyDef","staticBodyDef","Box2dObject","fixtureDef","pixi","density","friction","restitution","filter","categoryBits","maskBits","isSensor","userData","createFixtureDef","id","_id","isStatic","opponent","setX","p","setY","setRotation","addMask","bits","let","list","GetFixtureList","data","GetFilterData","SetFilterData","GetNext","addAllMask","removeMask","removeAllMask","toDynamic","SetType","toStatic","prototype","Circle","radius","shape","from","max","c","b","getLocalBounds","Rectangle","SetAsArray","Polygon","vertices","Edge","to","SetAsEdge"],"mappings":"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"}